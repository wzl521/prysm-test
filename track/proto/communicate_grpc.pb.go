// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: communicate.proto

package communicate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrackPuberClient is the client API for TrackPuber service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackPuberClient interface {
	GetTrack(ctx context.Context, in *GetTrackRequest, opts ...grpc.CallOption) (TrackPuber_GetTrackClient, error)
	GetTrackList(ctx context.Context, in *GetTrackRequest, opts ...grpc.CallOption) (TrackPuber_GetTrackListClient, error)
	GetInterestedTrack(ctx context.Context, in *GetTrackRequest, opts ...grpc.CallOption) (TrackPuber_GetInterestedTrackClient, error)
}

type trackPuberClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackPuberClient(cc grpc.ClientConnInterface) TrackPuberClient {
	return &trackPuberClient{cc}
}

func (c *trackPuberClient) GetTrack(ctx context.Context, in *GetTrackRequest, opts ...grpc.CallOption) (TrackPuber_GetTrackClient, error) {
	stream, err := c.cc.NewStream(ctx, &TrackPuber_ServiceDesc.Streams[0], "/communicate.TrackPuber/GetTrack", opts...)
	if err != nil {
		return nil, err
	}
	x := &trackPuberGetTrackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TrackPuber_GetTrackClient interface {
	Recv() (*Track, error)
	grpc.ClientStream
}

type trackPuberGetTrackClient struct {
	grpc.ClientStream
}

func (x *trackPuberGetTrackClient) Recv() (*Track, error) {
	m := new(Track)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trackPuberClient) GetTrackList(ctx context.Context, in *GetTrackRequest, opts ...grpc.CallOption) (TrackPuber_GetTrackListClient, error) {
	stream, err := c.cc.NewStream(ctx, &TrackPuber_ServiceDesc.Streams[1], "/communicate.TrackPuber/GetTrackList", opts...)
	if err != nil {
		return nil, err
	}
	x := &trackPuberGetTrackListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TrackPuber_GetTrackListClient interface {
	Recv() (*TrackList, error)
	grpc.ClientStream
}

type trackPuberGetTrackListClient struct {
	grpc.ClientStream
}

func (x *trackPuberGetTrackListClient) Recv() (*TrackList, error) {
	m := new(TrackList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trackPuberClient) GetInterestedTrack(ctx context.Context, in *GetTrackRequest, opts ...grpc.CallOption) (TrackPuber_GetInterestedTrackClient, error) {
	stream, err := c.cc.NewStream(ctx, &TrackPuber_ServiceDesc.Streams[2], "/communicate.TrackPuber/GetInterestedTrack", opts...)
	if err != nil {
		return nil, err
	}
	x := &trackPuberGetInterestedTrackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TrackPuber_GetInterestedTrackClient interface {
	Recv() (*Track, error)
	grpc.ClientStream
}

type trackPuberGetInterestedTrackClient struct {
	grpc.ClientStream
}

func (x *trackPuberGetInterestedTrackClient) Recv() (*Track, error) {
	m := new(Track)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TrackPuberServer is the server API for TrackPuber service.
// All implementations must embed UnimplementedTrackPuberServer
// for forward compatibility
type TrackPuberServer interface {
	GetTrack(*GetTrackRequest, TrackPuber_GetTrackServer) error
	GetTrackList(*GetTrackRequest, TrackPuber_GetTrackListServer) error
	GetInterestedTrack(*GetTrackRequest, TrackPuber_GetInterestedTrackServer) error
	mustEmbedUnimplementedTrackPuberServer()
}

// UnimplementedTrackPuberServer must be embedded to have forward compatible implementations.
type UnimplementedTrackPuberServer struct {
}

func (UnimplementedTrackPuberServer) GetTrack(*GetTrackRequest, TrackPuber_GetTrackServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTrack not implemented")
}
func (UnimplementedTrackPuberServer) GetTrackList(*GetTrackRequest, TrackPuber_GetTrackListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTrackList not implemented")
}
func (UnimplementedTrackPuberServer) GetInterestedTrack(*GetTrackRequest, TrackPuber_GetInterestedTrackServer) error {
	return status.Errorf(codes.Unimplemented, "method GetInterestedTrack not implemented")
}
func (UnimplementedTrackPuberServer) mustEmbedUnimplementedTrackPuberServer() {}

// UnsafeTrackPuberServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackPuberServer will
// result in compilation errors.
type UnsafeTrackPuberServer interface {
	mustEmbedUnimplementedTrackPuberServer()
}

func RegisterTrackPuberServer(s grpc.ServiceRegistrar, srv TrackPuberServer) {
	s.RegisterService(&TrackPuber_ServiceDesc, srv)
}

func _TrackPuber_GetTrack_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTrackRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrackPuberServer).GetTrack(m, &trackPuberGetTrackServer{stream})
}

type TrackPuber_GetTrackServer interface {
	Send(*Track) error
	grpc.ServerStream
}

type trackPuberGetTrackServer struct {
	grpc.ServerStream
}

func (x *trackPuberGetTrackServer) Send(m *Track) error {
	return x.ServerStream.SendMsg(m)
}

func _TrackPuber_GetTrackList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTrackRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrackPuberServer).GetTrackList(m, &trackPuberGetTrackListServer{stream})
}

type TrackPuber_GetTrackListServer interface {
	Send(*TrackList) error
	grpc.ServerStream
}

type trackPuberGetTrackListServer struct {
	grpc.ServerStream
}

func (x *trackPuberGetTrackListServer) Send(m *TrackList) error {
	return x.ServerStream.SendMsg(m)
}

func _TrackPuber_GetInterestedTrack_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTrackRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrackPuberServer).GetInterestedTrack(m, &trackPuberGetInterestedTrackServer{stream})
}

type TrackPuber_GetInterestedTrackServer interface {
	Send(*Track) error
	grpc.ServerStream
}

type trackPuberGetInterestedTrackServer struct {
	grpc.ServerStream
}

func (x *trackPuberGetInterestedTrackServer) Send(m *Track) error {
	return x.ServerStream.SendMsg(m)
}

// TrackPuber_ServiceDesc is the grpc.ServiceDesc for TrackPuber service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackPuber_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "communicate.TrackPuber",
	HandlerType: (*TrackPuberServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTrack",
			Handler:       _TrackPuber_GetTrack_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTrackList",
			Handler:       _TrackPuber_GetTrackList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetInterestedTrack",
			Handler:       _TrackPuber_GetInterestedTrack_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "communicate.proto",
}
